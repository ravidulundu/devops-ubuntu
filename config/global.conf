# Global Configuration File for WordPress Server Automation
# ==========================================================

# Project Information
PROJECT_NAME="WordPress Server Automation"
PROJECT_VERSION="2.0.0"
PROJECT_AUTHOR="DevOps Ubuntu Team"

# System Configuration
SUPPORTED_OS_VERSIONS="20.04,22.04,24.04,25.04,25.10"
REQUIRED_MEMORY_MB=1024
REQUIRED_DISK_GB=20

# Logging Configuration
LOG_LEVEL="INFO"
MAX_LOG_SIZE="100M"
LOG_RETENTION_DAYS=30

# Backup Configuration
BACKUP_RETENTION_DAYS=7
AUTO_BACKUP_ENABLED=true

# Security Configuration
FAIL2BAN_ENABLED=true
UFW_ENABLED=true
SSL_ENABLED=true
LETSENCRYPT_EMAIL=""

# Dynamic IP Whitelisting
DYNAMIC_IP_ENABLED=true
CLOUDFLARE_DOMAIN="ip.dulundu.tools"
IP_CHECK_INTERVAL=300

# Performance Tuning
AUTO_TUNE_ENABLED=true
HARDWARE_DETECTION=true
PERFORMANCE_MONITORING=true

# WordPress Configuration
WP_CLI_ENABLED=true
WP_AUTO_UPDATE=true
WP_CACHE_ENABLED=true

# CyberPanel Configuration
CYBERPANEL_ADMIN_USER="admin"
CYBERPANEL_PORT=8090

# OpenLiteSpeed Configuration
OLS_ADMIN_USER="admin"
OLS_ADMIN_PORT=7080
OLS_HTTP_PORT=80
OLS_HTTPS_PORT=443

# Notification Settings
EMAIL_NOTIFICATIONS=false
TELEGRAM_NOTIFICATIONS=false
SMTP_SERVER=""
SMTP_PORT=587
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""

# Module Execution Order
MODULE_ORDER="install config security wp-automation monitoring dynamic-tuning"

# Development/Debug Settings
DEBUG_MODE=false
VERBOSE_OUTPUT=false
DRY_RUN=false

# Path Configuration
OLS_INSTALL_PATH="/usr/local/lsws"
OLS_CONF_PATH="/usr/local/lsws/conf"
OLS_LOG_PATH="/usr/local/lsws/logs"
OLS_PHP_PATH_BASE="/usr/local/lsws/lsphp"

# Service Configuration
MYSQL_PORT="3306"
REDIS_PORT="6379"
MYSQL_BIND_ADDRESS="${MYSQL_BIND_ADDRESS:-127.0.0.1}"
REDIS_BIND_ADDRESS="${REDIS_BIND_ADDRESS:-127.0.0.1}"
DATABASE_HOST="${DATABASE_HOST:-localhost}"

# WordPress Configuration
WP_SITES_DIR="/usr/local/lsws/Example/html"
WP_DEFAULT_ADMIN_EMAIL="${WP_DEFAULT_ADMIN_EMAIL:-admin@example.com}"
WP_DB_HOST="${WP_DB_HOST:-$DATABASE_HOST}"

# Default Email Configuration  
DEFAULT_ADMIN_EMAIL="${DEFAULT_ADMIN_EMAIL:-admin@example.com}"
DEFAULT_SENDER_EMAIL="${DEFAULT_SENDER_EMAIL:-noreply@example.com}"

# Path Configuration - Linux FHS Compliant Auto-detection
# Detects installation type and applies appropriate filesystem hierarchy
SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Determine installation type based on Linux FHS standards
# Check if this looks like a production/system installation path
if [[ "$SCRIPT_ROOT" == *"/opt/wp-automation"* ]] || [[ "$SCRIPT_ROOT" == "/opt/wp-automation" ]]; then
    # FHS: /opt - Add-on software packages (production)
    INSTALL_TYPE="production" 
    CONFIG_DIR="${CONFIG_DIR:-/etc/wp-automation}"
    LOG_DIR="${LOG_DIR:-/var/log/wp-automation}"
    BACKUP_DIR="${BACKUP_DIR:-/var/backups/wp-automation}"
    MONITORING_DATA_DIR="${MONITORING_DATA_DIR:-/var/lib/wp-automation}"
    RUNTIME_DIR="${RUNTIME_DIR:-/var/run/wp-automation}"
elif [[ "$SCRIPT_ROOT" == *"/usr/local/wp-automation"* ]] || [[ "$SCRIPT_ROOT" == "/usr/local/wp-automation" ]]; then
    # FHS: /usr/local - Local software (system install)
    INSTALL_TYPE="system"
    CONFIG_DIR="${CONFIG_DIR:-/usr/local/etc/wp-automation}"
    LOG_DIR="${LOG_DIR:-/var/log/wp-automation}"
    BACKUP_DIR="${BACKUP_DIR:-/var/backups/wp-automation}"
    MONITORING_DATA_DIR="${MONITORING_DATA_DIR:-/var/lib/wp-automation}"
    RUNTIME_DIR="${RUNTIME_DIR:-/var/run/wp-automation}"
else
    # Development/portable installation or custom location
    INSTALL_TYPE="development"
    CONFIG_DIR="${CONFIG_DIR:-${SCRIPT_ROOT}/config}"
    LOG_DIR="${LOG_DIR:-${SCRIPT_ROOT}/logs}"
    BACKUP_DIR="${BACKUP_DIR:-${SCRIPT_ROOT}/backups}"
    MONITORING_DATA_DIR="${MONITORING_DATA_DIR:-${SCRIPT_ROOT}/data}"
    RUNTIME_DIR="${RUNTIME_DIR:-${SCRIPT_ROOT}/run}"
fi

# Create required directories if they don't exist (with proper permissions)
create_directories() {
    local dirs=("$CONFIG_DIR" "$LOG_DIR" "$BACKUP_DIR" "$MONITORING_DATA_DIR" "$RUNTIME_DIR")
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            # Set appropriate permissions based on FHS standards
            case "$dir" in
                */log/*)
                    chmod 755 "$dir"
                    ;;
                */lib/*)
                    chmod 755 "$dir" 
                    ;;
                */etc/*)
                    chmod 755 "$dir"
                    ;;
                */backups/*)
                    chmod 700 "$dir"  # Secure backup directory
                    ;;
                */run/*)
                    chmod 755 "$dir"
                    ;;
            esac
        fi
    done
}

# Only create directories if not sourcing for configuration only
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] || [[ -z "${SKIP_DIR_CREATION:-}" ]]; then
    create_directories
fi

# Environment-specific overrides
if [[ -f "${CONFIG_DIR}/.env" ]]; then
    source "${CONFIG_DIR}/.env"
fi